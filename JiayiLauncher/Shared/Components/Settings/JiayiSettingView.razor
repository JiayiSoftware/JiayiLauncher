@using System.Globalization
@using System.Reflection
@using JiayiLauncher.Appearance
@using JiayiLauncher.Settings
@using JiayiLauncher.Settings.SpecialTypes

<!--suppress CssInvalidPropertyValue -->
<div class="setting">
    @{
        var settingInfo = Setting.GetCustomAttribute<SettingAttribute>();
        var localizedSetting = JiayiSettings.Instance!.GetLocalizedSetting(Setting);
        var dependentSetting = JiayiSettings.Instance.GetSetting(settingInfo!.Dependency);
        if (dependentSetting == null
            || (dependentSetting.PropertyType == typeof(bool) && (bool?)dependentSetting.GetValue(JiayiSettings.Instance) == true))
        {
            <div>
                <div class="setting-title">
                    <strong>@localizedSetting.Name</strong>
                    @if (settingInfo.CanReset && !JiayiSettings.Instance.IsDefault(Setting))
                    {
                        <span class="material-symbols-sharp extra-button" title="@Strings.SettingsResetDefault"
                              @onclick="() => JiayiSettings.Instance.ResetToDefault(Setting)">undo</span>
                    }
                    @if (localizedSetting.Tooltip != string.Empty)
                    {
                        <span class="material-symbols-sharp extra-button" title="@Strings.SettingsMoreInfo"
                              @onclick="() => ShowTooltip(localizedSetting.Tooltip)">help_outline</span>
                    }
                </div>
                <p class="setting-description">@localizedSetting.Description</p>
            </div>
            
            switch (true)
            {
                case true when Setting.PropertyType == typeof(bool):
                    <JiayiToggle Checked="@((bool?)Setting.GetValue(JiayiSettings.Instance) ?? false)"
                                 CheckedChanged="value => ChangeBoolSetting(value, Setting)"/>
                    break;
                case true when Setting.PropertyType == typeof(string):
                    // feeling a bit silly today
                    var random = Random.Shared.Next(1, 1000);
                    var placeholder = random == 1 ? Strings.SettingsEasterEggText : localizedSetting.Name;
                    <JiayiTextBox 
                        Placeholder="@placeholder" 
                        Style="width: -webkit-fill-available; max-width: 40%;" 
                        Value="@((string?)Setting.GetValue(JiayiSettings.Instance) ?? string.Empty)"
                        Changed="value => ChangeStringSetting(value, Setting)"/>
                    break;
                case true when Setting.PropertyType == typeof(int[]):
                    var intSlider = (int[])Setting.GetValue(JiayiSettings.Instance)!;
                    <JiayiSlider 
                        Min="@intSlider[0]" 
                        Max="@intSlider[1]" 
                        Value="@intSlider[2]" 
                        Style="width: -webkit-fill-available; max-width: 40%;"
                        ValueChanged="value => ChangeSliderSetting(intSlider, (int)value, Setting)"/>
                    break;
                case true when Setting.PropertyType == typeof(float[]):
                    var floatSlider = (float[])Setting.GetValue(JiayiSettings.Instance)!;
                    <JiayiSlider 
                        Min="@floatSlider[0]" 
                        Max="@floatSlider[1]" 
                        Step="0.05f"
                        Value="@floatSlider[2]" 
                        Style="width: -webkit-fill-available; max-width: 40%;"
                        ValueChanged="value => ChangeSliderSetting(floatSlider, value, Setting)"/>
                    break;
                case true when Setting.PropertyType == typeof((string, Action)):
                    var (name, action) = ((string, Action))Setting.GetValue(JiayiSettings.Instance)!;
                    @* ReSharper disable once AccessToModifiedClosure *@
                    <JiayiButton OnClick="() => RunActionSetting(action, Setting)" Size="JiayiButton.ButtonSize.Small" Style="padding: 0.5rem 1rem">@name</JiayiButton>
                    break;
                case true when Setting.PropertyType == typeof((string, string)):
                    var (content, href) = ((string, string))Setting.GetValue(JiayiSettings.Instance)!;
                    @* ReSharper disable once AccessToModifiedClosure *@
                    <a href=@href><JiayiButton Size="JiayiButton.ButtonSize.Small" Style="padding: 0.5rem 1rem">@content</JiayiButton></a>
                    break;
                case true when Setting.PropertyType == typeof(System.Drawing.Color):
                    @* for now *@
                    var color = (System.Drawing.Color)Setting.GetValue(JiayiSettings.Instance)!;
                    <JiayiColorPicker Color="@(new TranslatableColor(color))" ColorChanged="s => ChangeColorSetting(s, Setting)" />
                    break;
                case true when Setting.PropertyType == typeof(ModeSetting):
                    var modeSetting = (ModeSetting)Setting.GetValue(JiayiSettings.Instance)!;
                    <JiayiDropDown Name="@localizedSetting.Name" Items="@modeSetting.AvailableModes"
                                   SelectedItem="@modeSetting.Mode"
                                   Style="width: -webkit-fill-available; max-width: 40%;"
                                   OnChange="mode => ChangeModeSetting(mode, Setting)"/>
                    break;
            }
        }
    }
</div>

@code {
    [Parameter]
    public PropertyInfo Setting { get; set; } = null!;
    
    [CascadingParameter]
    private IModalService ModalService { get; set; } = null!;
    
    private void ChangeStringSetting(string? value, PropertyInfo setting)
    {
        setting.SetValue(JiayiSettings.Instance, value ?? string.Empty);
        JiayiSettings.Instance!.Save();
    }
    
    private void ChangeBoolSetting(bool value, PropertyInfo setting)
    {
        var settingInfo = setting.GetCustomAttribute<SettingAttribute>();
        if (settingInfo!.Confirm && value)
        {
            var options = new List<(string, EventCallback)>
            {
                (Strings.Yes, new EventCallback(null, () =>
                {
                    setting.SetValue(JiayiSettings.Instance, value);
                    JiayiSettings.Instance!.Save();
                })),
                (Strings.No, EventCallback.Empty)
            };
            
            var parameters = new ModalParameters()
                .Add(nameof(MessageBox.Buttons), options)
                .Add(nameof(MessageBox.Message), Strings.SettingsConfirmEnable);
            
            ModalService.Show<MessageBox>(settingInfo.Name, parameters);
            return;
        }
        
        setting.SetValue(JiayiSettings.Instance, value);
        JiayiSettings.Instance!.Save();
    }
    
    private void ChangeSliderSetting(int[] slider, int value, PropertyInfo setting)
    {
        slider[2] = value;
        setting.SetValue(JiayiSettings.Instance, slider);
        JiayiSettings.Instance!.Save();
    }
    
    private void ChangeSliderSetting(float[] slider, float value, PropertyInfo setting)
    {
        slider[2] = value;
        setting.SetValue(JiayiSettings.Instance, slider);
        JiayiSettings.Instance!.Save();
    }

    private void ChangeColorSetting(TranslatableColor value, PropertyInfo setting)
    {
        setting.SetValue(JiayiSettings.Instance, value.Color);
        JiayiSettings.Instance!.Save();
    }
    
    private void ChangeModeSetting(JiayiDropDown value, PropertyInfo setting)
    {
        var modeSetting = (ModeSetting)setting.GetValue(JiayiSettings.Instance)!;
        modeSetting.Mode = value.SelectedItem!;
        setting.SetValue(JiayiSettings.Instance, modeSetting);
        JiayiSettings.Instance!.Save();
    }

    private void RunActionSetting(Action action, PropertyInfo setting)
    {
        var settingInfo = setting.GetCustomAttribute<SettingAttribute>();
        if (settingInfo!.Confirm)
        {
            var options = new List<(string, EventCallback)>
            {
                ("Yes", new EventCallback(null, action)),
                ("No", EventCallback.Empty)
            };
            
            var parameters = new ModalParameters()
                .Add(nameof(MessageBox.Buttons), options)
                .Add(nameof(MessageBox.Message), Strings.SettingsConfirmAction);
            
            ModalService.Show<MessageBox>(settingInfo.Name, parameters);
            return;
        }
        
        action();
    }

    private void ShowTooltip(string tt)
    {
        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Message), tt);
        
        ModalService.Show<MessageBox>(Strings.SettingsAboutSettingTitle, parameters);
    }
}