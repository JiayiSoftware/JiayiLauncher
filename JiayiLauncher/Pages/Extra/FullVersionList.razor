@page "/Versions/Full/{version?}"

@using JiayiLauncher.Features.Versions
@using Microsoft.JSInterop
@using System.IO
@using JiayiLauncher.Features.Game
@using JiayiLauncher.Shared.Components.Toasts
@using JiayiLauncher.Utils
@using WindowsAPICodePack.Dialogs

@* javascript :( *@
@inject IJSRuntime JavaScript

@inject NavigationManager NavigationManager
@inject IToastService ToastService

<div class="page-title" style="display: @_showTitle">
    <h4 @onclick="BackClicked">@Strings.VerManName</h4>
    <span class="material-symbols-sharp">arrow_right</span>
    <h3>@Strings.VerListName</h3>
</div>

<div class="find-tools">
    <span class="material-symbols-sharp">search</span>
    <JiayiTextBox Placeholder="@Strings.VerListSearch" @ref="_searchBox" Changed="StateHasChanged" />
    
    <div class="separator"></div>
    
    <p>@Strings.VerListShowDownloaded</p>
    <JiayiToggle CheckedChanged="InstalledVersionsChecked" />
    
    <div class="separator"></div>
    
    <JiayiButton Size="JiayiButton.ButtonSize.Small"
                 Style="color: var(--text-primary); background-color: var(--background-secondary); font-weight: normal;" OnClick="ImportClicked">
        @Strings.Import
    </JiayiButton>
</div>

<div class="version-list-page">
    @{
        var versions = _versionNames.Where(
            v => v.Contains(_searchBox?.Value ?? "", StringComparison.OrdinalIgnoreCase)).ToList();

        if (_showInstalledVersions)
        {
            versions = versions.Where(_versionManager.VersionInstalled).ToList();
        }
        
        if (versions.Count == 0)
        {
            <i class="no-versions">@Strings.VerListNoVersions</i>
        }
        else
        {
            <ul class="versions">
                @for (var i = 0; i < Math.Min(_amountToDisplay, versions.Count); i++)
                {
                    var name = versions[i];
                    var version = _versions.FirstOrDefault(x => x.Version == name);
                    var alert = name == Version ? "alert" : string.Empty;

                    <li class="version @alert" id="@name">
                        <div class="version-text">
                            <strong>@name</strong>
                            <i>@GetStatus(name)</i>
                        </div>

                        <div class="version-buttons">
                            @if (_versionManager.VersionInstalled(name))
                            {
                                <JiayiButton Size="@JiayiButton.ButtonSize.Small"
                                             Disabled="@_buttonStates[i]"
                                             OnClick="async () => await RemoveClicked(name)">@Strings.Remove</JiayiButton>
                                <JiayiButton Size="@JiayiButton.ButtonSize.Small"
                                             Disabled="@_buttonStates[i]"
                                             OnClick="async () => await SwitchClicked(name)">@Strings.Switch</JiayiButton>
                            }
                            else
                            {
                                if (version == null) continue;
                                if (version.UpdateId == string.Empty)
                                {
                                    <JiayiButton Size="@JiayiButton.ButtonSize.Small" Disabled="true">@Strings.Download</JiayiButton>
                                }
                                else if (_internet.OfflineMode)
                                {
                                    <JiayiButton Size="@JiayiButton.ButtonSize.Small" Disabled="true">@Strings.Download</JiayiButton>
                                }
                                else
                                {
                                    <JiayiButton Size="@JiayiButton.ButtonSize.Small"
                                                 Disabled="@_buttonStates[i]"
                                                 OnClick="async () => await DownloadClicked(version)">@Strings.Download</JiayiButton>
                                }
                            }
                        </div>
                    </li>
                }
            </ul>
            
            if (versions.Count > _amountToDisplay)
            {
                <div class="load-more" @onclick="() => _amountToDisplay += 10">
                    <a>@Strings.VerListLoadMore</a>
                    <span class="material-symbols-sharp">expand_more</span>
                </div>
            }
        }
    }
</div>

@code {
    [Parameter]
    public string? Version { get; set; }
    
    [Parameter]
    public bool ShowTitle { get; set; } = true;
    
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    private List<string> _versionNames = new();
    private List<MinecraftVersion> _versions = new();
    private int _amountToDisplay = 10;
    private List<string> _statuses = new();
    private List<bool> _buttonStates = new();

    private JiayiTextBox? _searchBox;
    private bool _showInstalledVersions;
    private string _showTitle => ShowTitle ? "flex" : "none";
    
    private readonly VersionList _versionList = Singletons.Get<VersionList>();
    private readonly VersionManager _versionManager = Singletons.Get<VersionManager>();
    private readonly InternetManager _internet = Singletons.Get<InternetManager>();
    private readonly Privileges _privileges = Singletons.Get<Privileges>();
    private readonly WinRegistry _winRegistry = Singletons.Get<WinRegistry>();

    protected override async Task OnInitializedAsync()
    {
        var versionList = await _versionList.GetFullVersionList();
        _versionNames.AddRange(_versionManager.GetCustomVersions());
        _versionNames.AddRange(versionList.Keys);
        _versions = versionList.Values.ToList();
        _statuses = new string[_versionNames.Count].ToList();
        _buttonStates = new bool[_versionNames.Count].ToList();
        
        // update statuses for custom versions
        for (var i = 0; i < _versionManager.GetCustomVersions().Count; i++)
        {
            _statuses[i] = Strings.Imported;
        }
        
        _versionManager.SwitchProgressChanged += (_, _) => StateHasChanged();
    }

    protected override async Task OnParametersSetAsync()
    {
        Version ??= "None";
        if (Version == "None") return;
        
        var index = _versionNames.ToList().IndexOf(Version);
        _amountToDisplay = index > 0 ? index + 5 : 10;
        
        // refresh state so js can scroll to the version
        StateHasChanged();
        await Task.Delay(100);
    
        var element = await JavaScript.InvokeAsync<IJSObjectReference>("document.getElementById", Version);
        await element.InvokeVoidAsync("scrollIntoView", new { behavior = "smooth", block = "center" });
    }

    private void BackClicked()
    {
        NavigationManager.NavigateTo("/Versions");
    }
    
    private int _switching = -1;

    private async Task DownloadClicked(MinecraftVersion ver)
    {
        var i = _versionNames.IndexOf(ver.Version);
        _switching = i;

        _statuses[i] = Strings.Downloading;
        _buttonStates[i] = true;
        
        await _versionManager.DownloadVersion(ver);
        
        _statuses[i] = string.Empty;
        _buttonStates[i] = false;
        _switching = -1;
        StateHasChanged();
    }

    private string GetStatus(string ver)
    {
        if (_versionManager.IsCustomVersion(ver)) return _statuses[_versionNames.IndexOf(ver)];
        
        var version = _versions[_versionNames.IndexOf(ver)];
        if (version.UpdateId == string.Empty) return Strings.NotAvailable;

        var i = _versionNames.IndexOf(ver);
        
        if (_statuses[i] == Strings.Downloading)
        {
            return _versionManager.DownloadProgress == 100 ? Strings.Extracting
                //: $"{_statuses[i]} {VersionManager.DownloadProgress}% complete";
                : string.Format($"{_statuses[i]} {Strings.CompletionPercent}", _versionManager.DownloadProgress);
        }
        
        return _statuses[i];
    }

    private async Task RemoveClicked(string ver)
    {
        var options = new List<(string, EventCallback)>();
        var parameters = new ModalParameters();
        
        var packageData = Singletons.Get<PackageData>();
        var package = await packageData.GetPackage();

        options.Add((Strings.Yes, new EventCallback(null, async () =>
        {
            var i = _versionNames.IndexOf(ver);
            _statuses[i] = Strings.Removing;
            _buttonStates[i] = true;
            
            var custom = _versionManager.IsCustomVersion(ver);

            await _versionManager.RemoveVersion(ver);

            if (custom)
            {
                _versionNames.RemoveAt(i);
                _statuses.RemoveAt(i);
                _buttonStates.RemoveAt(i);
            }
            else
            {
                _statuses[i] = string.Empty;
                _buttonStates[i] = false;
            }
            
            StateHasChanged();
        })));
        options.Add((Strings.No, EventCallback.Empty));

        parameters
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), Strings.VerListRemoveConfirm);
        
        var modal = ModalService.Show<MessageBox>(Strings.VerListRemove, parameters);
        await modal.Result;
        StateHasChanged();
    }

    private async Task SwitchClicked(string ver)
    {
        if (!_privileges.IsAdmin())
        {
            var modal = ModalService.Show<Escalate>(Strings.PrivEscTitle);
            var escalateResult = await modal.Result;
            if (escalateResult.Cancelled) return;
        }
        
        var i = _versionNames.IndexOf(ver);
        _statuses[i] = Strings.Switching;
        _buttonStates[i] = true;
        
        var result = await _versionManager.Switch(ver);
        var parameters = new ModalParameters();
        var options = new List<(string, EventCallback)>();

        switch (result)
        {
            case VersionManager.SwitchResult.Succeeded: break;
                
            case VersionManager.SwitchResult.DeveloperModeDisabled:
                options.Add((Strings.Yes, new EventCallback(null, _winRegistry.EnableDeveloperMode)));
                options.Add((Strings.No, EventCallback.Empty));
                
                parameters.Add(nameof(MessageBox.Buttons), options);
                parameters.Add(nameof(MessageBox.Message), 
                    Strings.VerListDevModeQuestion);
                break;
            case VersionManager.SwitchResult.VersionNotFound:
                parameters.Add(nameof(MessageBox.Message), Strings.VerListNotFound);
                break;
            case VersionManager.SwitchResult.BackupFailed:
                parameters.Add(nameof(MessageBox.Message), Strings.VerListBackupFailed);
                break;
            case VersionManager.SwitchResult.UnknownError:
            default:
                parameters.Add(nameof(MessageBox.Message), Strings.VerListUnknownError);
                break;
        }
        
        if (result != VersionManager.SwitchResult.Succeeded)
        {
            var modal = ModalService.Show<MessageBox>(Strings.Error, parameters);
            await modal.Result;
            StateHasChanged();
        }
        else
        {
            var minecraft = Singletons.Get<Minecraft>();
            await minecraft.Open();
        }
        
        _statuses[i] = string.Empty;
        _buttonStates[i] = false;
    }

    private async Task ImportClicked()
    {
        using var dialog = new CommonOpenFileDialog(Strings.VerListImport);
        dialog.DefaultExtension = "appx";
        dialog.Filters.Add(new CommonFileDialogFilter(Strings.VerListFileFilter, "*.appx"));
        
        if (dialog.ShowDialog() != CommonFileDialogResult.Ok) return;
        var path = dialog.FileName;

        if (!_versionManager.IsValidPackage(path))
        {
            var toastParams = new ToastParameters()
                .Add(nameof(JiayiToast.Title), Strings.VerListInvalidPackage)
                .Add(nameof(JiayiToast.Level), ToastLevel.Error);
                
            ToastService.ShowToast<JiayiToast>(toastParams, settings =>
            {
                settings.Timeout = 5;
                settings.ShowProgressBar = true;
            });
                
            return;
        }
            
        // add to list
        var versionList = await _versionList.GetFullVersionList();
        _versionNames.Clear();
        _versionNames.Add(Path.GetFileNameWithoutExtension(path));
        _versionNames.AddRange(_versionManager.GetCustomVersions());
        _versionNames.AddRange(versionList.Keys);
        _statuses = new string[_versionNames.Count].ToList();
        _buttonStates = new bool[_versionNames.Count].ToList();
            
        var i = _versionNames.IndexOf(Path.GetFileNameWithoutExtension(path));
        _statuses[i] = Strings.Importing;
        _buttonStates[i] = true;
            
        await _versionManager.AddCustomVersion(path);
            
        _statuses[i] = Strings.Imported;
        _buttonStates[i] = false;
        
        StateHasChanged();
    }

    private void InstalledVersionsChecked(bool show)
    {
        _showInstalledVersions = show;
        StateHasChanged();
    }

}