@page "/Shaders"

@using JiayiLauncher.Features.Shaders
@using JiayiLauncher.Utils

@inject NavigationManager NavigationManager

<div class="page-title">
    <h4 @onclick="BackClicked">@Strings.VerManName</h4>
    <span class="material-symbols-sharp">arrow_right</span>
    <h3>@Strings.ShaderManName</h3>
</div>

<div class="current-shader">
    <h4 style="text-align: left; margin-top: 0;">@Strings.ShaderManCurrentShader</h4>
    
    @if (_shaderManager.AppliedShader == string.Empty)
    {
        <p style="margin-bottom: 0.5rem">@Strings.ShaderManNoShader</p>
        <i>@Strings.ShaderManUsingVanilla</i>
    }
    else
    {
        <div class="shader">
            <strong>@_shaderManager.AppliedShader</strong>
            <p>
                @string.Format(Strings.ShaderManReplacingCount, _shaderManager.GetMaterialDiff(_shaderManager.AppliedShader).Count)
            </p>
        </div>
        
        <JiayiButton Size="JiayiButton.ButtonSize.Small" Style="margin-top: 0.5rem" 
                     OnClick="RemoveClicked">@Strings.Remove</JiayiButton>
    }
</div>

<h4>@Strings.ShaderManAvailableShaders</h4>

<div class="find-tools">
    <span class="material-symbols-sharp">search</span>
    <JiayiTextBox Placeholder="@Strings.ShaderManSearch" @ref="_searchBox" Changed="StateHasChanged" />
</div>

<ul class="available-shaders">
    @{
        _searchResults = 0;
        foreach (var shader in _shaderManager.AvailableShaders)
        {
            if (!shader.ToLower().Contains(_searchBox?.Value?.ToLower() ?? ""))
                continue;

            _searchResults++;

            <li class="available-shader">
                <div class="shader-name" title="@Strings.ShaderManViewMaterials" @onclick="() => ViewMaterialsClicked(shader)">
                    <strong>@shader</strong>

                    <div class="shader-count">
                        <span class="material-symbols-sharp">folder</span>
                        <p>
                            @string.Format(Strings.ShaderManMaterialCount, _shaderManager.GetMaterialDiff(shader).Count)
                        </p>
                    </div>
                </div>

                <div class="modify-buttons">
                    <span class="material-symbols-sharp modify-button"
                          title="@Strings.ShaderManRename" @onclick="() => RenameClicked(shader)">edit</span>
                    <span class="material-symbols-sharp modify-button" style="color: darkred"
                          title="@Strings.ShaderManDelete" @onclick="() => DeleteClicked(shader)">delete</span>

                    <JiayiButton Size="JiayiButton.ButtonSize.Small" Style="margin-left: 0.2rem"
                                 OnClick="() => ApplyClicked(shader)">@Strings.Apply</JiayiButton>
                </div>
            </li>
        }
    }

    @if (_searchResults == 0 && _shaderManager.Shaders.Count > 0)
    {
        <p style="text-align: center; margin-top: 0;">@Strings.ShaderManNoShaders</p>
    }
</ul>

<label class="drag-area" 
       title="@Strings.ShaderManDragDropInfo">
    @Strings.ShaderManDragDrop
    <InputFile OnChange="FileSelected" multiple/>
</label>


@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;
    
    private bool _appliedExpanded = true;
    private bool _availableExpanded; // false
    
    private JiayiTextBox? _searchBox;
    private int _searchResults;
    
    private readonly ShaderManager _shaderManager = Singletons.Get<ShaderManager>();

    protected override void OnInitialized()
    {
        _shaderManager.UpdateShaders();
    }

    private async Task FileSelected(InputFileChangeEventArgs file)
    {
        if (file.FileCount == 1)
        {
            await _shaderManager.AddShader(file.File);
            _availableExpanded = true;
        }
        else
        {
            foreach (var multipleFile in file.GetMultipleFiles())
            {
                await _shaderManager.AddShader(multipleFile);
                _availableExpanded = true;
            }
        }
        
        StateHasChanged();
    }
    
    private async Task RenameClicked(string shader)
    {
        var parameters = new ModalParameters()
            .Add(nameof(EditShader.Shader), shader);
        
        var modal = ModalService.Show<EditShader>(Strings.EditShaderName, parameters);
        await modal.Result;
        
        StateHasChanged();
    }

    private async Task DeleteClicked(string shader)
    {
        var options = new List<(string, EventCallback)>
        {
            (Strings.Yes, new EventCallback(null, () =>
            {
                _shaderManager.DeleteShader(shader);
            })),
            (Strings.No, EventCallback.Empty)
        };
        
        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), Strings.ShaderManDeleteConfirm);
        
        var modal = ModalService.Show<MessageBox>(Strings.ShaderManDelete, parameters);
        await modal.Result;
        
        StateHasChanged();
    }

    private async Task ApplyClicked(string shader)
    {
        _shaderManager.EnableShader(shader);
        await _shaderManager.ApplyShader();
        
        StateHasChanged();
    }

    private async Task RemoveClicked()
    {
        _shaderManager.DisableShader(_shaderManager.AppliedShader);
        await _shaderManager.RestoreVanillaShaders();
        
        StateHasChanged();
    }

    private void BackClicked()
    {
        NavigationManager.NavigateTo("/Versions");
    }

    private void ViewMaterialsClicked(string shader)
    {
        var materials = _shaderManager.GetMaterialDiff(shader);
        
        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Message), string.Format(Strings.ShaderManViewMaterialsText, string.Join("\n", materials)).Trim());
        
        ModalService.Show<MessageBox>(Strings.ShaderManMaterials, parameters);
    }

}