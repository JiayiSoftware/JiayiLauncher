@page "/TestPlace"
@using JiayiLauncher.Settings
@using JiayiLauncher.Features.Game
@using JiayiLauncher.Features.Versions
@using JiayiLauncher.Shared.Components.Toasts
@using JiayiLauncher.Utils

@inject IToastService ToastService

<h3>Components</h3>
<h4>Drop down buttons</h4>
<div style="width: 100%; display: flex; gap: 1rem;">
    <JiayiDropDown Name="Single option dropdown" Items="@_radioItems" />
    <JiayiDropDown Name="Multiple option dropdown" Items="@_checkboxItems" Multiselect="true" />
    <JiayiDropDown Name="A lot of items" Items="@_aLotOfItems" Multiselect="true" />
</div>

<h4>Buttons</h4>

<div style="width: 100%; display: flex; gap: 1rem; place-items: center;">
    <JiayiButton OnClick="ButtonClicked">Show a message box</JiayiButton>
    <JiayiButton OnClick="ShowMauiMessageBox">Show a Maui message box</JiayiButton>

    <JiayiButton Size="JiayiButton.ButtonSize.Small" OnClick="Crash">Crash Jiayi</JiayiButton>

    <JiayiButton OnClick="MinecraftVersion">@(_minecraftVersion)</JiayiButton>
    <JiayiButton OnClick="_minecraft.Open">Open Minecraft</JiayiButton>
    <JiayiButton OnClick="GameDataPath">Game data path</JiayiButton>

</div>

<h4>Text boxes</h4>

<JiayiTextBox Placeholder="Put some words here..." />

<h4>Settings</h4>

<JiayiTextBox Placeholder="Setting name" @ref="_settingName" />
<JiayiButton OnClick="ValidSetting">@_validSetting</JiayiButton>

<h4>Toggles</h4>

<JiayiToggle />
<JiayiToggle Checked="true" />

<h4>Sliders</h4>
<JiayiSlider Value="50" />

<h4>Version URLs</h4>
<JiayiTextBox Placeholder="Minecraft version" @ref="_versionsBox" />
<JiayiButton OnClick="VersionsClicked">Get download URL</JiayiButton>

<h4>Toasts</h4>
<JiayiDropDown Items="@_toastTypes" Name="Toast type" @ref="_toastType" />
<JiayiButton OnClick="ToastClicked">Show toast</JiayiButton>

<h4>Privilege escalation</h4>
<JiayiButton OnClick="EscalateModal">Ask for permissions</JiayiButton>
<JiayiButton OnClick="EscalateImmediately">Escalate immediately</JiayiButton>

<h4>Themes Page</h4>
<a href="/Themes">Themes</a>

@code {
    [CascadingParameter]
    public IModalService ModalService { get; set; } = default!;

    private string _minecraftVersion = "Minecraft version";
    private string _validSetting = "Is this a setting?";

    private readonly List<string> _radioItems = new() { "Radio button", "Choose one only", "Third option" };
    private readonly List<string> _checkboxItems = new() { "Checkbox", "Choose multiple", "Also a third option" };
    private readonly List<string> _aLotOfItems = new() { "Bunch of items", "Testing truncating selected items", "Third option", "Fourth option", "Fifth option", "Sixth option", "Seventh option", "Eighth option", "Ninth option", "Tenth option", "Eleventh option", "Twelfth option", "Thirteenth option", "Fourteenth option", "Fifteenth option", "Sixteenth option", "Seventeenth option", "Eighteenth option", "Nineteenth option", "Twentieth option" };

    private JiayiTextBox? _settingName;

    private JiayiTextBox? _versionsBox;

    private readonly List<string> _toastTypes = new() { "Success", "Warning", "Error", "Info" };
    private JiayiDropDown? _toastType;
    
    private readonly Minecraft _minecraft = Singletons.Get<Minecraft>();
    private readonly PackageData _packageData = Singletons.Get<PackageData>();
    private readonly Privileges _privileges = Singletons.Get<Privileges>();

    private void ButtonClicked()
    {
        var options = new List<(string, EventCallback)>
        {
            ("Yes", EventCallback.Empty),
            ("No", EventCallback.Empty),
            ("Maybe", EventCallback.Empty)
        };

        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Buttons), options)
            .Add(nameof(MessageBox.Message), "This is a test message box.");

        ModalService.Show<MessageBox>("Test message box", parameters);
    }

    private async Task ShowMauiMessageBox()
    {
        await MainThread.InvokeOnMainThreadAsync(async () =>
        {
            var mainPage = Singletons.Get<MainPage>();
            await mainPage.DisplayAlert("This is a test", "This is a test message box.", "Okay");
        });
    }

    private static void Crash()
    {
        throw new Exception("This is a test crash.");
    }

    private async Task MinecraftVersion()
    {
        var version = await _packageData.GetVersion();
        _minecraftVersion = version;
    }

    private void ValidSetting()
    {
        _validSetting = JiayiSettings.Instance!.GetSetting(_settingName!.Value!) != null ? "Yes it is!" : "I didn't see it.";
    }

    private void GameDataPath()
    {
        var path = _packageData.GetGameDataPath();
        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Message), $"Game data path: {path}");

        ModalService.Show<MessageBox>("Game data path", parameters);
    }

    private async Task VersionsClicked()
    {
        if (_versionsBox?.Value == null) return;

        var version = await Singletons.Get<VersionList>().GetVersion(_versionsBox.Value);
        var url = await RequestFactory.GetDownloadUrl(version.UpdateId);

        var parameters = new ModalParameters()
            .Add(nameof(MessageBox.Message), url);

        ModalService.Show<MessageBox>("Download URL", parameters);
    }

    private void ToastClicked()
    {
        var type = _toastType?.SelectedItem ?? "Success";
        var toastType = type switch
        {
            "Success" => ToastLevel.Success,
            "Warning" => ToastLevel.Warning,
            "Error" => ToastLevel.Error,
            "Info" => ToastLevel.Info,
            _ => ToastLevel.Success
        };

        var parameters = new ToastParameters()
            .Add(nameof(JiayiToast.Title), "This is a test toast.")
            .Add(nameof(JiayiToast.Content), new RenderFragment(builder =>
            {
                builder.OpenElement(0, "p");
                builder.AddContent(1, "This is a toast body.");
                builder.CloseElement();
            }))
            .Add(nameof(JiayiToast.Level), toastType);

        ToastService.ShowToast<JiayiToast>(parameters, settings =>
        {
            settings.Timeout = 5;
            settings.ShowProgressBar = true;
        });
    }

    private void EscalateModal()
    {
        ModalService.Show<Escalate>("Additional privileges required");
    }

    private void EscalateImmediately()
    {
        _privileges.Escalate();
    }

}